--- a/src/aapt2/ResourceUtils.cpp
+++ b/src/aapt2/ResourceUtils.cpp
@@ -222,7 +222,7 @@
     }
 
     if (!type.empty() && type != "attr") {
-      return false;
+      // Apktool: Don't die out if private resource.
     }
 
     if (entry.empty()) {
--- a/src/aapt2/cmd/Link.cpp
+++ b/src/aapt2/cmd/Link.cpp
@@ -2326,9 +2326,9 @@
     if (package_id_int > std::numeric_limits<uint8_t>::max()
         || package_id_int == kFrameworkPackageId
         || (!options_.allow_reserved_package_id && package_id_int < kAppPackageId)) {
-      context.GetDiagnostics()->Error(
+      context.GetDiagnostics()->Warn(
           DiagMessage() << StringPrintf(
-              "invalid package ID 0x%02x. Must be in the range 0x7f-0xff.", package_id_int));
+              "invalid package ID 0x%02x. Must be in the range 0x7f-0xff. Ignoring...", package_id_int));
       return 1;
     }
     context.SetPackageId(static_cast<uint8_t>(package_id_int));
@@ -2410,6 +2410,23 @@
       ".mpg", ".mpeg", ".mp4", ".m4a", ".m4v", ".3gp", ".3gpp", ".3g2", ".3gpp2", ".wma", ".wmv",
       ".webm", ".mkv"});
 
+  // Populate no compress extensions specified in the extensions file.
+  if (options_.extensions_to_not_compress_path) {
+    std::ifstream extensionsFile(options_.extensions_to_not_compress_path.value());
+
+    if (extensionsFile.fail()) {
+      context.GetDiagnostics()->Error(
+        DiagMessage() << "could not open extensions file "
+          << options_.extensions_to_not_compress_path.value()
+          << " for reading");
+      return 1;
+    }
+
+    for (std::string line; getline(extensionsFile, line);) {
+      options_.extensions_to_not_compress.insert(line);
+    }
+  }
+
   // Turn off auto versioning for static-libs.
   if (context.GetPackageType() == PackageType::kStaticLib) {
     options_.no_auto_version = true;
--- a/src/aapt2/cmd/Link.h
+++ b/src/aapt2/cmd/Link.h
@@ -71,6 +71,7 @@
   bool do_not_compress_anything = false;
   std::unordered_set<std::string> extensions_to_not_compress;
   Maybe<std::regex> regex_to_not_compress;
+  Maybe<std::string> extensions_to_not_compress_path;
 
   // Static lib options.
   bool no_static_lib_packages = false;
@@ -272,6 +273,8 @@
         &options_.manifest_fixer_options.rename_overlay_target_package);
     AddOptionalFlagList("-0", "File suffix not to compress.",
         &options_.extensions_to_not_compress);
+    AddOptionalFlag("-e", "File containing list of extensions not to compress.",
+        &options_.extensions_to_not_compress_path);
     AddOptionalSwitch("--no-compress", "Do not compress any resources.",
         &options_.do_not_compress_anything);
     AddOptionalSwitch("--keep-raw-values", "Preserve raw attribute values in xml files.",
--- a/src/aapt2/java/JavaClassGenerator.cpp
+++ b/src/aapt2/java/JavaClassGenerator.cpp
@@ -58,6 +58,8 @@
     "true",       "false",        "null"};
 
 static bool IsValidSymbol(const StringPiece& symbol) {
+  // Apktool: Everything is a valid symbol
+  return true;
   return sJavaIdentifiers.find(symbol) == sJavaIdentifiers.end();
 }
 
--- a/src/aapt2/link/PrivateAttributeMover.cpp
+++ b/src/aapt2/link/PrivateAttributeMover.cpp
@@ -81,7 +81,6 @@
     }
 
     ResourceTableType* priv_attr_type = package->FindOrCreateType(ResourceType::kAttrPrivate);
-    CHECK(priv_attr_type->entries.empty());
     priv_attr_type->entries = std::move(private_attr_entries);
   }
   return true;
--- a/src/aapt2/ResourceTable.cpp
+++ b/src/aapt2/ResourceTable.cpp
@@ -375,11 +375,7 @@ bool ResourceTable::AddResourceWithIdMangled(const ResourceNameRef& name, const
 bool ResourceTable::ValidateName(NameValidator name_validator, const ResourceNameRef& name,
                                  const Source& source, IDiagnostics* diag) {
   const StringPiece bad_char = name_validator(name.entry);
-  if (!bad_char.empty()) {
-    diag->Error(DiagMessage(source) << "resource '" << name << "' has invalid entry name '"
-                                    << name.entry << "'. Invalid character '" << bad_char << "'");
-    return false;
-  }
+  // Apktool: Allow invalid entry names.
   return true;
 }
 
